import { Component, ViewChild } from "@angular/core";
import "ag-grid-enterprise";

@Component({
  selector: "my-app",
  template: `<div style="height: 100%; padding-top: 30px; box-sizing: border-box;">
    <ag-grid-angular
    #agGrid
    style="width: 100%; height: 100%;"
    id="myGrid"
    [rowData]="rowData"
    class="ag-theme-balham"
    [columnDefs]="columnDefs"
    [rowData]="rowData"
    [components]="components"
    [treeData]="true"
    [animateRows]="true"
    [enableFilter]="true"
    [enableSorting]="true"
    [enableColResize]="true"
    [groupDefaultExpanded]="groupDefaultExpanded"
    [getDataPath]="getDataPath"
    [getRowNodeId]="getRowNodeId"
    [autoGroupColumnDef]="autoGroupColumnDef"
    (gridReady)="onGridReady($event)"
    ></ag-grid-angular>
</div>

<div style="position: absolute; top: 0px; left: 0px;">
    <button (click)="addNewGroup()">Add New Group</button>
    <button (click)="moveSelectedNodeToTarget(9)">Move Selected to 'stuff'</button>
    <button (click)="removeSelected()">Remove Selected</button>
</div>`
})
export class AppComponent {
  private gridApi;
  private gridColumnApi;
  private rowData: any[];

  private columnDefs;
  private rowData;
  private components;
  private groupDefaultExpanded;
  private getDataPath;
  private getRowNodeId;
  private autoGroupColumnDef;

  constructor() {
    this.columnDefs = [
      {
        field: "asOfDate",
        comparator: function(d1, d2) {
          return new Date(d1).getTime() < new Date(d2).getTime() ? -1 : 1;
        }
      }
      
    ];
    this.rowData = [
    
    {
        
        "entityName": [
            "ABC",
            "A"
        ],
        "groupId": 1,
        "id": 152046,
   
        "asOfDate": "2024-08-09",
       
    },
    {
        "entityName": [
            "ABC",
            "B"
        ],
         "groupId": 1,
        "id": 152079,
      
        "asOfDate": "2024-08-09",
       

    },
    {
        "entityName": [
            "ABC",
            "C"
        ],
         "groupId": 1,
        "id": 152080,
        
        "asOfDate": "2024-08-09",
      
 
    },
    {
        "entityName": [
            "ABC"
        ],
         "groupId": 1,
        "id": 152087,
     
        "asOfDate": "2024-08-09",
       

    },
    
    {
        "entityName": [
            "ABC",
            "A"
        ],
         "groupId": 2,

        "id": 152098,
        
        "asOfDate": "2024-08-12",
        

    },
    {
        "entityName": [
            "ABC",
            "B"
        ],
         "groupId": 2,

        "id": 152131,
   
        "asOfDate": "2024-08-12",
        
    },
    {
        "entityName": [
            "ABC",
            "C"
        ],
         "groupId": 2,

        "id": 152132,
        
        "asOfDate": "2024-08-12",
     
        

    },
    {
        "entityName": [
            "ABC"
        ],
          "groupId": 2,
        "id": 152139,
         "asOfDate": "2024-08-12",
        
    },
    
];
    this.components = { fileCellRenderer: getFileCellRenderer() };
    this.groupDefaultExpanded = -1;
    this.getDataPath = function(data) {
      return [`${data.groupId}`, ...data.entityName];
    };
   
    this.autoGroupColumnDef = {
      headerName: "Files",
      width: 250,
      cellRendererParams: {
        checkbox: true,
        suppressCount: true,
        innerRenderer: "fileCellRenderer"
      }
    };
  }

  addNewGroup() {
    var newGroupData = [
      {
        id: getNextId(),
        filePath: ["Music", "wav", "hit_" + new Date().getTime() + ".wav"],
        dateModified: "Aug 23 2017 11:52:00 PM",
        size: 58.9
      }
    ];
    this.gridApi.updateRowData({ add: newGroupData });
  }

  removeSelected() {
    var selectedNode = this.gridApi.getSelectedNodes()[0];
    if (!selectedNode) {
      console.warn("No nodes selected!");
      return;
    }
    this.gridApi.updateRowData({ remove: getRowsToRemove(selectedNode) });
  }

  moveSelectedNodeToTarget(targetRowId) {
    var selectedNode = this.gridApi.getSelectedNodes()[0];
    if (!selectedNode) {
      console.warn("No nodes selected!");
      return;
    }
    var targetNode = this.gridApi.getRowNode(targetRowId);
    var invalidMove = selectedNode.key === targetNode.key || isSelectionParentOfTarget(selectedNode, targetNode);
    if (invalidMove) {
      console.warn("Invalid selection - must not be parent or same as target!");
      return;
    }
    var rowsToUpdate = getRowsToUpdate(selectedNode, targetNode.data.filePath);
    this.gridApi.updateRowData({ update: rowsToUpdate });
  }

  onGridReady(params) {
    this.gridApi = params.api;
    this.gridColumnApi = params.columnApi;
  }
}

function getNextId() {
  if (!window.nextId) {
    window.nextId = 13;
  } else {
    window.nextId++;
  }
  return window.nextId;
}
function getFileCellRenderer() {
  function FileCellRenderer() {}
  FileCellRenderer.prototype.init = function(params) {
    var tempDiv = document.createElement("div");
    var value = (params.data && params.data.fileName ? 
      params.data.fileName : params.value);
    var icon = getFileIcon(value);
    tempDiv.innerHTML = icon
      ? '<span><i class="' + icon + '"></i>' + '<span class="filename"></span>' + value + "</span>"
      : value;
    this.eGui = tempDiv.firstChild;
  };
  FileCellRenderer.prototype.getGui = function() {
    return this.eGui;
  };
  return FileCellRenderer;
}
function getRowsToRemove(node) {
  var res = [];
  for (var i = 0; i < node.childrenAfterGroup.length; i++) {
    res = res.concat(getRowsToRemove(node.childrenAfterGroup[i]));
  }
  return node.data ? res.concat([node.data]) : res;
}
function isSelectionParentOfTarget(selectedNode, targetNode) {
  var children = selectedNode.childrenAfterGroup;
  for (var i = 0; i < children.length; i++) {
    if (targetNode && children[i].key === targetNode.key) return true;
    isSelectionParentOfTarget(children[i], targetNode);
  }
  return false;
}
function getRowsToUpdate(node, parentPath) {
  var res = [];
  var newPath = parentPath.concat([node.key]);
  if (node.data) {
    node.data.filePath = newPath;
  }
  for (var i = 0; i < node.childrenAfterGroup.length; i++) {
    var updatedChildRowData = getRowsToUpdate(node.childrenAfterGroup[i], newPath);
    res = res.concat(updatedChildRowData);
  }
  return node.data ? res.concat([node.data]) : res;
}
function getFileIcon(filename) {
  return filename.endsWith(".mp3") || filename.endsWith(".wav")
    ? "fa fa-file-audio-o"
    : filename.endsWith(".xls")
      ? "fa fa-file-excel-o"
      : filename.endsWith(".txt") ? "fa fa fa-file-o" : filename.endsWith(".pdf") ? "fa fa-file-pdf-o" : "fa fa-folder";
}
